const tileRows = 15;
const tileColumns = 30;

const mazeRows = 15;
const mazeColumns = 30;

const screenRows = 20;
const screenColumns = 61;
const framerate = 25;


const players = 1;
const player1 = 0;

const player_shots = 40;
const player_reload = 5;
const player_frequency = 2;
const player_magazine = 5;

const default_enemies = 1000;
const spawn_enemies = 500;


flowers = 5000;
gold = 500;


// â–“



const miniMap =
    [
        "##############################",
        "#              ##       ##   #",
        "#   ### ######    ####       #",
        "#   ### ##############  ###  #",
        "#    ## #####   ######  ###  #",
        "# ## ##  #### ######     ##  #",
        "#  ####              ###     #",
        "#   ##########  #  #  ##  ## #",
        "#   ##########  #  ####  ### #",
        "#     ########  # ####     # #",
        "#  ######           ######   #",
        "#  ####### ######  ########  #",
        "#  ####### ######  ###   ##  #",
        "#                            #",
        "##############################"
    ];

const tileSet = {
    path0:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path1:
        [
            "                              ",
            "                              ",
            "                              ",
            "      111                     ",
            "     11111                    ",
            "    11111                     ",
            "     111                      ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path2:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "      111                     ",
            "     11111                    ",
            "    11111                     ",
            "     111                      ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path3:
        [
            "                              ",
            "                              ",
            "                              ",
            "                       111    ",
            "                      11111   ",
            "                     11111    ",
            "                      111     ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path4:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                       111    ",
            "                      11111   ",
            "                     11111    ",
            "                      111     ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path5:
        [
            "                              ",
            "    111                       ",
            "   11111                      ",
            "     1111                     ",
            "       111                    ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path6:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "    111                       ",
            "   11111                      ",
            "     1111                     ",
            "       111                    ",
            "                              ",
        ],
    path7:
        [
            "                              ",
            "                      111     ",
            "                     11111    ",
            "                       1111   ",
            "                         111  ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path8:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                      111     ",
            "                     11111    ",
            "                       1111   ",
            "                         111  ",
            "                              ",
        ],
    path9:
        [
            "                              ",
            "    111                       ",
            "   11111                      ",
            "     1111                     ",
            "       111                    ",
            "                              ",
            "                              ",
            "                              ",
            "                    222       ",
            "                   22222      ",
            "                  22222       ",
            "                   222        ",
            "                              ",
            "                              ",
            "                              "
        ],
    path10:
        [
            "                              ",
            "                              ",
            "                              ",
            "                    111       ",
            "                   11111      ",
            "                  11111       ",
            "                   111        ",
            "                              ",
            "                              ",
            "                              ",
            "    222                       ",
            "   22222                      ",
            "     2222                     ",
            "       222                    ",
            "                              ",
        ],
    path11:
        [
            "                              ",
            "                              ",
            "                              ",
            "      111                     ",
            "     11111                    ",
            "    11111                     ",
            "     111                      ",
            "                              ",
            "                              ",
            "                              ",
            "                    222       ",
            "                   22222      ",
            "                     2222     ",
            "                       222    ",
            "                              ",
        ],
    path12:
        [
            "                              ",
            "                    111       ",
            "                   11111      ",
            "                     1111     ",
            "                       111    ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "      222                     ",
            "     22222                    ",
            "    22222                     ",
            "     222                      ",
            "                              ",
            "                              ",
        ],
    path12:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "             12221            ",
            "           111111111          ",
            "          33111411133         ",
            "           111111111          ",
            "             12221            ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path12:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "             11111            ",
            "           111121111          ",
            "          11122222111         ",
            "           111121111          ",
            "             11111            ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path13:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "            2222222           ",
            "          22211111222         ",
            "         2211111111122        ",
            "         2111113111112        ",
            "         2211111111122        ",
            "          22211111222         ",
            "            2222222           ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path13:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "            2222222           ",
            "          22211111222         ",
            "         2211113111122        ",
            "         2111333331112        ",
            "         2211113111122        ",
            "          22211111222         ",
            "            2222222           ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path14:
        [
            "                              ",
            "                    11111     ",
            "                  111141111   ",
            "                 11144444111  ",
            "                  111141111   ",
            "                    11111     ",
            "                              ",
            "                              ",
            "                              ",
            "     22222                    ",
            "   222232222                  ",
            "  22233333222                 ",
            "   222232222                  ",
            "     22222                    ",
            "                              ",
        ],
    path15:
        [
            "                              ",
            "     22222                    ",
            "   222242222                  ",
            "  22244444222                 ",
            "   222242222                  ",
            "     22222                    ",
            "                              ",
            "                              ",
            "                              ",
            "                    11111     ",
            "                  111131111   ",
            "                 11133333111  ",
            "                  111131111   ",
            "                    11111     ",
            "                              ",
        ],
    path16:
        [
            "                              ",
            "     222              222     ",
            "    222                222    ",
            "   22                    22   ",
            "   2                      2   ",
            "             11111            ",
            "           111131111          ",
            "          11113331111         ",
            "           111131111          ",
            "             11111            ",
            "   2                      2   ",
            "   22                    22   ",
            "    222                222    ",
            "     222              222     ",
            "                              ",
        ],
    path17:
        [
            "                              ",
            "     111              222     ",
            "    111                222    ",
            "   11                    22   ",
            "   1                      2   ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "   2                      1   ",
            "   22                    11   ",
            "    222                111    ",
            "     222              111     ",
            "                              ",
        ],
    path18:
        [
            "                              ",
            "                              ",
            "                              ",
            "             11111            ",
            "            2222222           ",
            "             11111            ",
            "             11111            ",
            "            2222222           ",
            "             11111            ",
            "             11111            ",
            "            2222222           ",
            "             11111            ",
            "                              ",
            "                              ",
            "                              ",
        ],
    path19:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "         22   22   22         ",
            "      111221112211122111      ",
            "      111221112211122111      ",
            "         22   22   22         ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
        ],

    path20:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "    1144        4411111155    ",
            "   111133        3311111155   ",
            "  11111133        3311111155  ",
            "  111111133        331111111  ",
            "  5511111133        33111111  ",
            "   5511111133        331111   ",
            "    5511111144        4411    ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path21:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "            122               ",
            "           11122              ",
            "           111122             ",
            "           1111122            ",
            "           33111122           ",
            "            33111122          ",
            "             33111122         ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path22:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "            11222233          ",
            "             11222233         ",
            "              11222233        ",
            "               1122223        ",
            "                112222        ",
            "                 11222        ",
            "                  112         ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path23:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "    5511111144        4411    ",
            "   5511111133        331111   ",
            "  5511111133        33111111  ",
            "  111111133        331111111  ",
            "  11111133        3311111155  ",
            "   111133        3311111155   ",
            "    1144        4411111155    ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path24:
        [
            "                              ",
            "                              ",
            "                              ",
            "       0000055555500000       ",
            "      001110000000011100      ",
            "     40000111111111100004     ",
            "     44001322233222310044     ",
            "     44001322233222310044     ",
            "     40000111111111100004     ",
            "      001110000000011100      ",
            "       0000055555500000       ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    path25:
        [
            "                              ",
            "                              ",
            "       6666666666666666       ",
            "      111111111111111111      ",
            "     11111  333333  11111     ",
            "    44544    2222    44544    ",
            "    44544    2222    44544    ",
            "    44544    2222    44544    ",
            "    44544    2222    44544    ",
            "    44544    2222    44544    ",
            "     11111  333333  11111     ",
            "      111111111111111111      ",
            "       6666666666666666       ",
            "                              ",
            "                              "
        ],
    path26:
        [
            "5555        666666         111",
            "55555     666666666      11111",
            "555555     66666666      11111",
            "5555555     66666666      1111",
            "55555555      6666666      111",
            "55555          666666         ",
            "         6666666666666        ",
            "       6666666666         222 ",
            "          6666          222222",
            "44444                  2222222",
            "4444444444                 222",
            "44444444444      3333        2",
            "44444444       333333333      ",
            "444444      333333333333333   ",
            "44444       33333       333333"
        ],

    path27:
        [
            "11111       55555       555555",
            "111111      555555555555555   ",
            "11111111       555555555      ",
            "1111111111       5555        4",
            "111111111                  444",
            "11111                  4444444",
            "          6666          444444",
            "      66666666666         4444",
            "         6666666666666        ",
            "  222          666666         ",
            "22222222      6666666      33 ",
            "2222222     66666666      3333",
            "222222     66666666      33333",
            "22222     666666666      33333",
            "2222        666666         333",
        ],


    path28:
        [
            "3333333316          6133333333",
            "333222331            133222333",
            "3332223316          6133222333",
            "333333331            133333333",
            "1111111116          6111111111",
            "6 6 6 6 6            6 6 6 6 6",
            "                              ",
            "                              ",
            "                              ",
            "6 6 6 6 6            6 6 6 6 6",
            "1111111116          6111111111",
            "333333331            133333333",
            "3332223316          6133222333",
            "333222331            133222333",
            "3333333316          6133333333"
        ],
    path29:
        [
            "                              ",
            "                              ",
            "                              ",
            "            11111             ",
            "            12221             ",
            "            12221             ",
            "     1111111122211111111      ",
            "     1222222222222222221      ",
            "     1111111122211111111      ",
            "            12221             ",
            "            12221             ",
            "            11111             ",
            "                              ",
            "                              ",
            "                              "
        ],
    path30:
        [
            "                              ",
            "                              ",
            "       3             3        ",
            "     333     111     333      ",
            "            12221             ",
            "            12221             ",
            "      1111111222111111        ",
            "     122222222322222221       ",
            "      1111111222111111        ",
            "            12221             ",
            "            12221             ",
            "     333     111     333      ",
            "       3             3        ",
            "                              ",
            "                              "
        ],
    path31:
        [
            "                              ",
            "                              ",
            "                              ",
            "      22222       22222       ",
            "     2111112     2111112      ",
            "      22222       22222       ",
            "                              ",
            "                              ",
            "                              ",
            "      22222       22222       ",
            "     2111112     2111112      ",
            "      22222       22222       ",
            "                              ",
            "                              ",
            "                              "
        ],
    path32:
        [
            "22                          22",
            "2                            2",
            "        1    222    1         ",
            "       1111   2   1111        ",
            "        111       111         ",
            "         1         1          ",
            "     2        3        2      ",
            "     22      333      22      ",
            "     2        3        2      ",
            "         1         1          ",
            "        111       111         ",
            "       1111   2   1111        ",
            "        1    222    1         ",
            "2                            2",
            "22                          22",
        ],


    path33:
        [
            "                              ",
            "                              ",
            "    3333333333333  4444444    ",
            "    3333    33333     4444    ",
            "    3333              4444    ",
            "                      4444    ",
            "    4444    2111112   4444    ",
            "    4444    1111111   4444    ",
            "    4444    2111112           ",
            "    4444                      ",
            "    4444               333    ",
            "    4444      33333    333    ",
            "    4444444   333333333333    ",
            "                              ",
            "                              "
        ],

    path34:
        [
            "                              ",
            "                              ",
            "    3333333333333  4444444    ",
            "    3333    33333     4444    ",
            "    3333              4444    ",
            "                      4444    ",
            "    4444              4444    ",
            "    4444              4444    ",
            "    4444                      ",
            "    4444                      ",
            "    4444               333    ",
            "    4444      33333    333    ",
            "    4444444   333333333333    ",
            "                              ",
            "                              "
        ],


    path35:
        [
            "                              ",
            "                              ",
            "     3333            2222     ",
            "    33333   11       22222    ",
            "    33333   1111      2222    ",
            "    33333    1111             ",
            "    3333     1111             ",
            "             1111     3333    ",
            "             1111    33333    ",
            "             1111    33333    ",
            "    2222      1111   33333    ",
            "    22222       11   33333    ",
            "     2222            3333     ",
            "                              ",
            "                              "
        ],


    path36:
        [
            "                              ",
            "                              ",
            "     3333            2222     ",
            "    33333            22222    ",
            "    33333             2222    ",
            "    33333                     ",
            "    3333                      ",
            "                      3333    ",
            "                     33333    ",
            "                     33333    ",
            "    2222             33333    ",
            "    22222            33333    ",
            "     2222            3333     ",
            "                              ",
            "                              "
        ],

    path37:
        [
            "                              ",
            "                              ",
            "                              ",
            "            11                ",
            "            1111              ",
            "             1111             ",
            "             1111             ",
            "             1111             ",
            "             1111             ",
            "             1111             ",
            "              1111            ",
            "                11            ",
            "                              ",
            "                              ",
            "                              "
        ],



    block0:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################"
        ],
    block1:
        [
            "##############################",
            "##############################",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "####                      ####",
            "##############################",
            "##############################"
        ],
    block2:
        [
            "         ############         ",
            "       ################       ",
            "     ####################     ",
            "   ########################   ",
            "  ##########################  ",
            " ############################ ",
            "##############################",
            "##############################",
            "##############################",
            " ############################ ",
            "  ##########################  ",
            "   ########################   ",
            "     ####################     ",
            "       ################       ",
            "         ############         ",
        ],
    block3:
        [
            "         ############         ",
            "       ################       ",
            "     ####################     ",
            "   ########################   ",
            "  ##########      ##########  ",
            " ##########        ########## ",
            "##########          ##########",
            "##########          ##########",
            "##########          ##########",
            " ##########        ########## ",
            "  ##########      ##########  ",
            "   ########################   ",
            "     ####################     ",
            "       ################       ",
            "         ############         ",
        ],
    block4:
        [
            "                              ",
            "                              ",
            "       ################       ",
            "      ##################      ",
            "     #####  ######  #####     ",
            "    #####    ####    #####    ",
            "    #####    ####    #####    ",
            "    #####    ####    #####    ",
            "    #####    ####    #####    ",
            "    #####    ####    #####    ",
            "     #####  ######  #####     ",
            "      ##################      ",
            "       ################       ",
            "                              ",
            "                              "
        ],
    corner0:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################"
        ],
    corner1TopLeft:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "############################  ",
            "#########################     ",
            "######################        ",
            "###################           ",
            "#################             ",
            "###############               ",
            "#############                 ",
            "############                  ",
            "##########                    ",
            "#########                     ",
            "########                      "
        ],
    corner1TopRight:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "  ############################",
            "     #########################",
            "        ######################",
            "           ###################",
            "             #################",
            "               ###############",
            "                 #############",
            "                  ############",
            "                    ##########",
            "                     #########",
            "                      ########"
        ],
    corner1BottomLeft:
        [
            "########                      ",
            "#########                     ",
            "##########                    ",
            "############                  ",
            "#############                 ",
            "###############               ",
            "#################             ",
            "###################           ",
            "######################        ",
            "#########################     ",
            "############################  ",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],
    corner1BottomRight:
        [
            "                      ########",
            "                     #########",
            "                    ##########",
            "                  ############",
            "                 #############",
            "               ###############",
            "             #################",
            "           ###################",
            "        ######################",
            "     #########################",
            "  ############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################"
        ],

    corner2TopLeft:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
        ],
    corner2TopRight:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
        ],
    corner2BottomLeft:
        [
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],
    corner2BottomRight:
        [
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],

    corner3TopLeft:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########          #######     ",
            "########         #########    ",
            "########         #########    ",
            "########         #########    ",
            "########          #######     ",
            "########                      ",
            "########                      ",
        ],
    corner3TopRight:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "     #######          ########",
            "    #########         ########",
            "    #########         ########",
            "    #########         ########",
            "     #######          ########",
            "                      ########",
            "                      ########",
        ],
    corner3BottomLeft:
        [
            "########                      ",
            "########                      ",
            "########          #######     ",
            "########         #########    ",
            "########         #########    ",
            "########         #########    ",
            "########          #######     ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],
    corner3BottomRight:
        [
            "                      ########",
            "                      ########",
            "     #######          ########",
            "    #########         ########",
            "    #########         ########",
            "    #########         ########",
            "     #######          ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],
    corner4TopLeft:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##################            ",
            "################              ",
            "##############                ",
            "############                  ",
            "##########                    ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
        ],
    corner4TopRight:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "            ##################",
            "              ################",
            "                ##############",
            "                  ############",
            "                    ##########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
        ],
    corner4BottomLeft:
        [
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "##########                    ",
            "############                  ",
            "##############                ",
            "################              ",
            "##################            ",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],
    corner4BottomRight:
        [
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                    ##########",
            "                  ############",
            "                ##############",
            "              ################",
            "            ##################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
        ],

    Edge0:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "##############################"
        ],
    Edge1Top:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    Edge1Right:
        [
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
        ],
    Edge1Bottom:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "##############################",
            "##############################",
            "##############################",
            "##############################"
        ],
    Edge1Left:
        [
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      "
        ],

    Edge1Top:
        [
            "##############################",
            "##############################",
            "########          ############",
            "##                      ######",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    Edge1Right:
        [
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                       #######",
            "                        ######",
            "                        ######",
            "                         #####",
            "                          ####",
            "                          ####",
            "                          ####",
            "                         #####",
            "                       #######",
            "                      ########",
            "                      ########",
        ],
    Edge1Bottom:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "##                      ######",
            "########          ############",
            "##############################",
            "##############################",
        ],
    Edge1Left:
        [
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "#######                       ",
            "######                        ",
            "######                        ",
            "#####                         ",
            "####                          ",
            "####                          ",
            "####                          ",
            "#####                         ",
            "#######                       ",
            "########                      ",
            "########                      ",
        ],
    Edge2Top:
        [
            "##############################",
            "##############################",
            "##########            ########",
            "####                        ##",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    Edge2Right:
        [
            "                      ########",
            "                      ########",
            "                       #######",
            "                       #######",
            "                        ######",
            "                        ######",
            "                         #####",
            "                         #####",
            "                         #####",
            "                        ######",
            "                        ######",
            "                       #######",
            "                      ########",
            "                      ########",
            "                      ########",
        ],
    Edge2Bottom:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "####                        ##",
            "##########            ########",
            "##############################",
            "##############################",
        ],
    Edge2Left:
        [
            "########                      ",
            "########                      ",
            "#######                       ",
            "#######                       ",
            "######                        ",
            "######                        ",
            "#####                         ",
            "#####                         ",
            "#####                         ",
            "######                        ",
            "######                        ",
            "#######                       ",
            "########                      ",
            "########                      ",
            "########                      ",
        ],
    Edge3Top:
        [
            "##############################",
            "##############################",
            "##############################",
            "##############################",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "            #######           ",
            "           #########          ",
            "           #########          ",
            "           #########          ",
            "            #######           ",
            "                              ",
            "                              ",
        ],
    Edge3Right:
        [
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "     #######          ########",
            "    #########         ########",
            "    #########         ########",
            "    #########         ########",
            "     #######          ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########"
        ],
    Edge3Bottom:
        [
            "                              ",
            "                              ",
            "            #######           ",
            "           #########          ",
            "           #########          ",
            "           #########          ",
            "            #######           ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "##############################",
            "##############################",
            "##############################",
            "##############################"
        ],
    Edge3Left:
        [
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########          #######     ",
            "########         #########    ",
            "########         #########    ",
            "########         #########    ",
            "########          #######     ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      "
        ],
    Edge4Top:
        [
            "##############################",
            "##############################",
            "##############################",
            "####       ########       ####",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              "
        ],
    Edge4Right:
        [
            "                      ########",
            "                      ########",
            "                        ######",
            "                        ######",
            "                        ######",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                      ########",
            "                        ######",
            "                        ######",
            "                        ######",
            "                      ########",
            "                      ########",
        ],
    Edge4Bottom:
        [
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "                              ",
            "####       ########       ####",
            "##############################",
            "##############################",
            "##############################",
        ],
    Edge4Left:
        [
            "########                      ",
            "########                      ",
            "######                        ",
            "######                        ",
            "######                        ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "########                      ",
            "######                        ",
            "######                        ",
            "######                        ",
            "########                      ",
            "########                      "
        ],
}

const pathSet = [tileSet.path0, tileSet.path1, tileSet.path2, tileSet.path3,
tileSet.path4, tileSet.path5, tileSet.path6, tileSet.path7,
tileSet.path8, tileSet.path9, tileSet.path10, tileSet.path11,
tileSet.path12, tileSet.path13, tileSet.path14, tileSet.path15,
tileSet.path16, tileSet.path17, tileSet.path18, tileSet.path19,
tileSet.path20, tileSet.path21, tileSet.path22, tileSet.path23,
tileSet.path24, tileSet.path25, tileSet.path26, tileSet.path27,
tileSet.path28, tileSet.path29, tileSet.path30, tileSet.path31,
tileSet.path32, tileSet.path33, tileSet.path34, tileSet.path35,
tileSet.path36, tileSet.path37]



const mapRows = mazeRows * tileRows;
const mapColumns = mazeColumns * tileColumns;

const player_up = "^";
const player_down = "v";
const player_left = "<";
const player_right = ">";
const player_idle = "&#9619";
const ground_empty = "&#9608";
const ground_block = "&#9619"
const bullet = "o";

const player1_start_d = player_right;
const player1_start_x = div(mapColumns, 2);
const player1_start_y = div(mapRows, 2);

const path_none = 0;
const path_walk = 1;
const path_block = 2;
const path_swim = 3;
const path_fly = 4;

const block_top = 1;
const block_left = 2;
const block_right = 4;
const block_bottom = 8;

const type_empty = 0;
const type_block = 1;
const type_water = 2;
const type_dirt = 3;
const type_grass = 4;
const type_stone = 5;
const type_marble = 6;
const type_deco = 7;
const type_sand = 8;
const type_swamp = 9;
const type_toxic = 10;
const type_ruin = 11;
const type_flower = 12;
const type_gold = 13;

const type_player = 14;
const type_npc = 15;
const type_enemy = 16;

const graphic_none = "";
const graphic_empty = ground_empty;
const graphic_block = ground_block;
const graphic_water = "#";
const graphic_dirt = "#";
const graphic_grass = "#";
const graphic_sand = "#";
const graphic_swamp = "#";
const graphic_toxic = "#";
const graphic_ruins = "#";
const graphic_flower = ".";
const graphic_stone = "#";
const graphic_marble = "#";
const graphic_deco = "#";
const graphic_gold = "+";

// const graphic_flower = "&#127803";
// const graphic_cow = "&#128019";
// const graphic_mountain = "&#9968";
// const graphic_tree = "&#127795";

const graphic_player = "o";
const graphic_npc = "o";
const graphic_enemy = "o";
const graphic_bullet = "o";

const color = {
    none: "draw_none",
    empty: "draw_empty",
    block: "draw_block",
    water: ["draw_water",
        "draw_water2",
        "draw_water3"],
    dirt: ["draw_dirt",
        "draw_dirt2",
        "draw_dirt3"],
    grass: ["draw_grass",
        "draw_grass2",
        "draw_grass3"],
    stone: ["draw_stone",
        "draw_stone2",
        "draw_stone3"],
    sand: ["draw_sand",
        "draw_sand2",
        "draw_sand3"],
    marble: ["draw_marble",
        "draw_marble2",
        "draw_marble3"],
    deco: ["draw_deco",
        "draw_deco2",
        "draw_deco3"],
    swamp: ["draw_swamp",
        "draw_swamp2",
        "draw_swamp3"],
    toxic: ["draw_toxic",
        "draw_toxic2",
        "draw_toxic3"],
    ruin: ["draw_ruin",
        "draw_ruin2",
        "draw_ruin3"],
    gold: ["draw_gold"],
    bullet: ["draw_bullet"],
    flower: ["draw_flower",
        "draw_flower2",
        "draw_flower3",
        "draw_flower4",
        "draw_flower5"],
    player: ["draw_player"],
    npc: ["draw_npc"],
    enemy: ["draw_enemy"]
}
const tileColor = [color.water, color.stone, color.dirt, color.grass,
color.sand, color.marble, color.deco, color.swamp,
color.toxic, color.ruin]
const tileType = [type_water, type_stone, type_dirt, type_grass,
    type_sand, type_marble, type_deco, type_swamp,
    type_toxic, type_ruin]


const look_none = 0;
const look_up = 1;
const look_down = 2;
const look_left = 3;
const look_right = 4;


const combination0 = Array(2 ** 4).fill(0);
const combination1 = Array(2 ** 4).fill(0);
const combination2 = Array(2 ** 4).fill(0);
const combination3 = Array(2 ** 4).fill(0);

combination1[block_top + block_right + block_bottom + block_left] = tileSet.block0;
combination1[block_top] = tileSet.block0;
combination1[block_right] = tileSet.block0;
combination1[block_bottom] = tileSet.block0;
combination1[block_left] = tileSet.block0;

kind_dead = 0;
kind_stupid = 1;
kind_wander = 2;
kind_walker = 3;
kind_sleeper = 4;
kind_lurker = 5;
kind_hunter = 6;


let t = 0, keyPress = "";


const maze = Array(mazeRows * mazeColumns).fill(type_empty);
const mazeSet = Array(mazeRows * mazeColumns).fill(0);
const map = Array(mapRows * mapColumns).fill(type_empty);
const mapColor = Array(map.length).fill(color.empty);
const ground = Array(map.length).fill(type_empty);
const groundColor = Array(map.length).fill(color.empty);
const entity = Array(map.length).fill(type_empty);
const path = Array(map.length).fill(path_walk);

let screen = Array(screenRows * screenColumns).fill(type_empty);
let screenColor = Array(screen.length).fill(color.empty);
let output = "";
let screenPosX = player1_start_x - div(screenColumns, 2),
    screenPosY = player1_start_y - div(screenRows, 2);

const main = document.getElementById("main");
main.addEventListener("keydown", event => { key[event.code] = true; keyPress = event.code });
main.addEventListener("keyup", event => { key[event.code] = false; keyPress = ""; done[event.code] = false });
const timer1 = document.getElementById("timer");
const event1 = document.getElementById("event");
const field = document.getElementById("field");
const table = document.getElementById("table");

const unit = [{
    info: {
        name: "Player 1",
        type: "player",
        hp: 100,
        slow: 2,
        frame: 1
    },
    position: {
        d: player1_start_d,
        x: player1_start_x,
        y: player1_start_y
    },
    graphic: {
        color: color.player[0],
        current: player1_start_d,
        idle: player_idle,
        up: player_up,
        down: player_down,
        left: player_left,
        right: player_right,
    },
    shots: player_shots,
    shot: [{ d: 0, x: 0, y: 0, r: 0 }],
    range: screenColumns + screenRows,
    freq: player_frequency,
    mag: player_magazine,
    max: player_magazine,
    delay: 1,
    frame: 1
}];

for (i = 1; i < player_shots; i++) {
    unit[0].shot.push({ d: 0, x: 0, y: 0, r: 0 });
}

let enemy = []
for (i = 1; i < default_enemies; i++) {
    enemy.push({x: 0, y: 0, kind: kind_dead});
}
    

const key = {
    ArrowUp: false,
    ArrowDown: false,
    ArrowRight: false,
    ArrowLeft: false,
    Enter: false,
    Space: false,
    Backspace: false,
    KeyP: false,


    KeyW: false,
    KeyS: false,
    KeyA: false,
    keyD: false,
    KeyQ: false,
    KeyE: false,
    KeyY: false,
    KeyX: false,
    KeyC: false,
    Key0: false,
    Key1: false,
    Key2: false,
    Key3: false,
    Key4: false,
    Key5: false,
    Key6: false,
    Key7: false,
    Key8: false,
    Key9: false,
    F1: false,
    F2: false,
    F3: false,
    F4: false,
    F5: false,
    F6: false,
    F7: false,
    F8: false,
    F9: false,
    F10: false,
    F11: false,
    F12: false,
    Escape: false,
    ControlLeft: false,
    ShiftLeft: false,
    ControlRight: false,
    ShiftRight: false,
    AltLeft: false,
    Insert: false,
    Delete: false,
    Home: false,
    End: false,
    PageUp: false,
    PageDown: false
}

const done = {
    ArrowUp: false,
    ArrowDown: false,
    ArrowRight: false,
    ArrowLeft: false,
    Enter: false,
    Space: false,
    Backspace: false,
    KeyP: false,
    
    KeyW: false,
    KeyS: false,
    KeyA: false,
    keyD: false,
    KeyQ: false,
    KeyE: false,
    KeyY: false,
    KeyX: false,
    KeyC: false,
    Key0: false,
    Key1: false,
    Key2: false,
    Key3: false,
    Key4: false,
    Key5: false,
    Key6: false,
    Key7: false,
    Key8: false,
    Key9: false,
    F1: false,
    F2: false,
    F3: false,
    F4: false,
    F5: false,
    F6: false,
    F7: false,
    F8: false,
    F9: false,
    F10: false,
    F11: false,
    F12: false,
    Escape: false,
    ControlLeft: false,
    ShiftLeft: false,
    ControlRight: false,
    ShiftRight: false,
    AltLeft: false,
    Insert: false,
    Delete: false,
    Home: false,
    End: false,
    PageUp: false,
    PageDown: false
}

let edit = false;
let pause = false;

let enemies = 0;


function div(a, b) {
    if (b > 0) {
        return Math.floor(a / b)
    } else {
        console.log("Error: Divisor <= 0")
    }
}

InitMap(type_stone, color.stone);

let enemyTimer = window.setInterval(UpdateEnemies, div(1000,10));

let shotTimer3 = window.setInterval(UpdateShots, div(1000, framerate + framerate));

let timer = window.setInterval(myTimer, div(1000, framerate));
function myTimer() {
    if (!pause) {
        t += 1;
        timer1.innerHTML = t;
        event1.innerHTML = keyPress;

        UpdateInput();
        // UpdateShots();
        // UpdateEnemies();

        DrawScreen(screenRows, screenColumns)
    }
}


function UpdateInput() {
    let u = unit[player1];

    if (key["ArrowUp"] || key["KeyW"]) {
        if (u.position.y > 0 && GetMap(u.position.x, u.position.y - 1) == type_empty && (u.position.d == look_up || (key.ArrowDown || key.ArrowLeft || key.ArrowRight || key.ControlLeft || key.ControlRight || key.ShiftLeft || key.AltLeft || key.Space))) {
            SetMap(u.x, u.y, type_empty);
            SetMapColor(u.x, u.y, color.empty);
            u.position.y--;
            SetMap(u.x, u.y, type_player);
            SetMapColor(u.x, u.y, color.player);

            screenPosY--;
        }
        if (!key.Space && !key.ControlLeft && !key.ControlRight && !key.ShiftLeft && !key.AltLeft && !key.ArrowLeft && !key.ArrowRight) {
            u.graphic.current = u.graphic.up
            u.position.d = look_up
        }
    }

    if (key["ArrowDown"] || key["KeyS"]) {
        if (u.position.y < mapRows - 2 && GetMap(u.position.x, u.position.y + 1) == type_empty && (u.position.d == look_down || (key.ArrowUp || key.ArrowLeft || key.ArrowRight || key.ControlLeft || key.ControlRight || key.ShiftLeft || key.AltLeft || key.Space))) {
            SetMap(u.x, u.y, type_empty);
            SetMapColor(u.x, u.y, color.empty);    
            u.position.y++;
            SetMap(u.x, u.y, type_player);
            SetMapColor(u.x, u.y, color.player);

            screenPosY++
        }
        if (!key.Space && !key.ControlLeft && !key.ControlRight && !key.ShiftLeft && !key.AltLeft && !key.ArrowLeft && !key.ArrowRight) {
            u.graphic.current = u.graphic.down
            u.position.d = look_down
        }
    }
    if (key["ArrowLeft"] || key["KeyA"]) {
        if (u.position.x > 0 && GetMap(u.position.x - 1, u.position.y) == type_empty && (u.position.d == look_left || (key.ArrowDown || key.ArrowUp || key.ArrowRight || key.ControlLeft || key.ControlRight || key.ShiftLeft || key.AltLeft || key.Space))) {
            SetMap(u.x, u.y, type_empty);
            SetMapColor(u.x, u.y, color.empty);    
            u.position.x--;
            SetMap(u.x, u.y, type_player);
            SetMapColor(u.x, u.y, color.player);

            screenPosX--;
        }
        if (!key.Space && !key.ControlLeft && !key.ControlRight && !key.ShiftLeft && !key.AltLeft && !key.ArrowUp && !key.ArrowDown) {
            u.graphic.current = u.graphic.left
            u.position.d = look_left
        }
    }
    if (key["ArrowRight"] || key["KeyD"]) {
        if (u.position.x < mapColumns - 2 && GetMap(u.position.x + 1, u.position.y) == type_empty && (u.position.d == look_right || (key.ArrowDown || key.ArrowLeft || key.ArrowUp || key.ControlLeft || key.ControlRight || key.ShiftLeft || key.AltLeft || key.Space))) {
            SetMap(u.x, u.y, type_empty);
            SetMapColor(u.x, u.y, color.empty);
            u.position.x++;
            SetMap(u.x, u.y, type_player);
            SetMapColor(u.x, u.y, color.player);

            screenPosX++;
        }
        if (!key.Space && !key.ControlLeft && !key.ControlRight && !key.ShiftLeft && !key.AltLeft && !key.ArrowUp && !key.ArrowDown) {
            u.graphic.current = u.graphic.right
            u.position.d = look_right
        }
    }
    if (key["Space"]) {
        if (u.shots > 0) {
            if (u.frame < u.freq) {
                u.frame++
            } else {
                u.frame = 1
                u.shots--;
                u.shot[u.shots].d = u.position.d;
                u.shot[u.shots].x = u.position.x;
                u.shot[u.shots].y = u.position.y;
                u.shot[u.shots].r = u.range
            }
        }
    }
    if (key["Enter"]) {
        if (!done["Enter"]) {
            ClearMap();
            BuildMaze(type_grass, color.grass)

            done["Enter"] = true
        }
    }
    if (key["Backspace"]) {
        if (!done["Backspace"]) {
            ClearMap()

            done["Backspace"] = true
        }
    }
    if (key["Escape"]) {
        if (!done["Escape"]) {
            if (pause) {
                // for (let i in key) {
                //  key[i] = false
                // }
                // clearInterval(timer);
                pause = false
            } else {
                // timer = setInterval(myTimer, div(1000, framerate));   
                pause = true
            }
            done["Escape"] = true
        }
    }

    if (key["KeyP"]) {
        if (!key["KeyP"]) {
            if (edit) {
                edit = false
            } else {
                edit = true
            }
            done["KeyP"] = true
        }
    }
    if (key["F1"]) {
        if (!key["F1"]) {

            done["F1"] = true
        }
    }
}

function SetEnemy(x, y, kind) {
    if (enemies < enemy.length && OnMap(x, y)){
        enemy[enemies].x = x;
        enemy[enemies].y = y;
        enemy[enemies].kind = kind;

        SetMap(x, y, type_enemy);
        SetMapColor(x, y, color.enemy);

        enemies++
    }
}

function UpdateEnemies() {
    for (e of enemy) {
        switch (e.kind) {
            case kind_dead:


                break
            case kind_sleeper:

                break
            case kind_stupid:

                break
            case kind_wander:

                break
            case kind_lurker:
                Think_Lurker(e)
                break
            case kind_hunter:
                Think_Hunter(e)
                break
            default:
        }
    }
}

function Walk (u, x, y) {
    if (u.x < x && GetMap(u.x + 1, u.y) == type_empty) {
        SetMap(u.x, u.y, type_empty);
        SetMapColor(u.x, u.y, color.empty);
        u.x++
        SetMap(u.x, u.y, type_enemy);
        SetMapColor(u.x, u.y, color.enemy);
    } else if (u.x > x && GetMap(u.x - 1, u.y) == type_empty) {
        SetMap(u.x, u.y, type_empty);
        SetMapColor(u.x, u.y, color.empty);
        u.x--
        SetMap(u.x, u.y, type_enemy);
        SetMapColor(u.x, u.y, color.enemy);
    }
    if (u.y < y && GetMap(u.x, u.y + 1) == type_empty) {
        SetMap(u.x, u.y, type_empty);
        SetMapColor(u.x, u.y, color.empty);
        u.y++
        SetMap(u.x, u.y, type_enemy);
        SetMapColor(u.x, u.y, color.enemy);

    } else if (u.y > y && GetMap(u.x, u.y - 1) == type_empty) {
        SetMap(u.x, u.y, type_empty);
        SetMapColor(u.x, u.y, color.empty);
        u.y--
        SetMap(u.x, u.y, type_enemy);
        SetMapColor(u.x, u.y, color.enemy);
    }
}

function Think_Stupid(e) {
    if (OnScreen(e.x, e.y)) {
        Walk(e, unit[player1].position.x, unit[player1].position.y)
    }
}
function Think_Wander(e) {
    if (Math.random() <= 0.1) {
        Walk(e, unit[player1].position.x, unit[player1].position.y)
    }
}
function Think_Lurker(e) {
    if (OnScreen(e.x, e.y)) {
        Walk(e, unit[player1].position.x, unit[player1].position.y)
    }
}
function Think_Hunter(e) {
    if (OnScreen(e.x, e.y)) {
        Walk(e, unit[player1].position.x, unit[player1].position.y)
    }
}

function UpdateShots() {
    let d = 0, x = 0, y = 0, r = 0;
    let u = unit[player1], start = u.shots;

    for (let i = start; i < u.shot.length; i++) {
        next = u.shot[u.shots];
        s = u.shot[i];
        if (s.d != look_none) {
            if (s.d == look_up) {
                s.y--;
                let tile = GetMap(s.x, s.y);
                if (tile != type_empty || s.y < 0 || s.r <= 0) {
                    if (tile != type_block) {
                        SetMap(s.x, s.y, type_empty);
                        SetMapColor(s.x, s.y, color.empty)
                    }
                    s.d = look_none;

                    d = next.d;
                    x = next.x;
                    y = next.y;
                    r = next.r;
                    next.d = s.d;
                    next.x = s.x;
                    next.y = s.y;
                    next.r = s.r;
                    s.d = d;
                    s.x = x;
                    s.y = y;
                    s.r = r;

                    u.shots++;

                    // console.log("Shots Recover:" + String(u.shots))
                } else {
                    s.r--
                }
            } else if (s.d == look_down) {
                s.y++;
                let tile = GetMap(s.x, s.y);
                if (tile != type_empty || s.y >= mapRows || s.r <= 0) {
                    if (tile != type_block) {
                        SetMap(s.x, s.y, type_empty);
                        SetMapColor(s.x, s.y, color.empty)
                    }
                    s.d = look_none;

                    d = next.d;
                    x = next.x;
                    y = next.y;
                    r = next.r;
                    next.d = s.d;
                    next.x = s.x;
                    next.y = s.y;
                    next.r = s.r;
                    s.d = d;
                    s.x = x;
                    s.y = y;
                    s.r = r;

                    u.shots++;

                    // console.log("Shots Recover:" + String(u.shots))
                } else {
                    s.r--
                }
            } else if (s.d == look_left) {
                s.x--;
                let tile = GetMap(s.x, s.y);
                if (tile != type_empty || s.x < 0 || s.r <= 0) {
                    if (tile != type_block) {
                        SetMap(s.x, s.y, type_empty);
                        SetMapColor(s.x, s.y, color.empty)
                    }
                    s.d = look_none;

                    d = next.d;
                    x = next.x;
                    y = next.y;
                    r = next.r;
                    next.d = s.d;
                    next.x = s.x;
                    next.y = s.y;
                    next.r = s.r;
                    s.d = d;
                    s.x = x;
                    s.y = y;
                    s.r = r;

                    u.shots++;

                    // console.log("Shots Recover:" + String(u.shots))
                } else {
                    s.r--
                }
            } else if (s.d == look_right) {
                s.x++;
                let tile = GetMap(s.x, s.y);
                if (tile != type_empty || s.x >= mapColumns || s.r <= 0) {
                    if (tile != type_block) {
                        SetMap(s.x, s.y, type_empty);
                        SetMapColor(s.x, s.y, color.empty)
                    }
                    s.d = look_none;

                    d = next.d;
                    x = next.x;
                    y = next.y;
                    r = next.r;
                    next.d = s.d;
                    next.x = s.x;
                    next.y = s.y;
                    next.r = s.r;
                    s.d = d;
                    s.x = x;
                    s.y = y;
                    s.r = r;

                    u.shots++;

                    // console.log("Shots Recover:" + String(u.shots))
                } else {
                    s.r--
                }
            }
        }
    }
}


function GetColor(color) {
    return color[0]
}

function GetColorVariant(color_object) {
    return color_object[RandomInt(0, color_object.length)]

}

function RandomInt(min, max) {
    return min + Math.floor(Math.random() * (max - min))
};

function SetRandomMap(type, color) {
    let x = Math.floor(Math.random() * mapColumns);
    let y = Math.floor(Math.random() * mapRows);
    let u = unit[player1].position;
    if ((x > 0 && x < mapColumns && y > 0 && y < mapRows) && !(x == u.x && y == u.y) && (GetMap(x, y) == type_empty)) {
        SetMap(x, y, type);
        SetMapColor(x, y, color);
    }
}

function SetRandomGround(type, color) {
    let x = Math.floor(Math.random() * mapColumns);
    let y = Math.floor(Math.random() * mapRows);
    let u = unit[player1].position;
    if ((x > 0 && x < mapColumns && y > 0 && y < mapRows) && !(x == u.x && y == u.y) && (GetMap(x, y) == type_empty)) {
        SetGround(x, y, type);
        SetGroundColor(x, y, color);
    }
}

function InitMaze() {
    for (let y = 0; y < miniMap.length; y++) {
        for (let x = 0; x < miniMap[y].length; x++) {
            SetMaze(x, y, GetMini(x, y))
        }
    }
}


function GetRandomTilePath() {
    if (Math.random() > 0.50) {
        return pathSet[0]
    } else {
        return pathSet[RandomInt(0, pathSet.length)]
    }
}

function GetRandomTileColor() {
    return tileColor[RandomInt(0, tileColor.length)];
}

function BuildMaze(type, color) {
    let index = 0;
    let mazeTile = " ";
    let mapTile = " ";
    let pathTile = pathSet[0];
    let pathColor1 = tileColor[0],
        pathColor2 = tileColor[1],
        pathColor3 = tileColor[2],
        pathColor4 = tileColor[3],
        pathColor5 = tileColor[4],
        pathColor6 = tileColor[5],
        pathColor7 = tileColor[6],
        pathColor8 = tileColor[7],
        pathColor9 = tileColor[8],
        pathColor0 = tileColor[9];
    let pathType1 = tileType[0],
        pathType2 = tileType[1],
        pathType3 = tileType[2],
        pathType4 = tileType[3],
        pathType5 = tileType[4],
        pathType6 = tileType[5],
        pathType7 = tileType[6],
        pathType8 = tileType[7],
        pathType9 = tileType[8],
        pathType0 = tileType[9];


    for (let mazeX = 0; mazeX < mazeColumns; mazeX++) {
        for (let mazeY = 0; mazeY < mazeRows; mazeY++) {
            mazeTile = GetMaze(mazeX, mazeY);
            if (mazeTile == "#") {
                // Do also a Block Array instead Path
                // pathTile = pathSet[RandomInt(0, pathSet.length)];
                // pathColor = tileColor[RandomInt(0, tileColor.length)];
                for (let tileX = 0; tileX < tileColumns; tileX++) {
                    for (let tileY = 0; tileY < tileRows; tileY++) {
                        mapTile = GetTile(tileX, tileY, tileSet.block0);
                        if (mapTile == "#") {
                            SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, type)
                            SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(color))
                        } else {
                            SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, type_empty);
                            SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, color.empty)
                        }
                    }
                }
            } else {
                pathTile = pathSet[RandomInt(0, pathSet.length)];
                index = RandomInt(0, tileColor.length);
                pathColor0 = tileColor[index];
                pathType0 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor1 = tileColor[index];
                pathType1 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor2 = tileColor[index];
                pathType2 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor3 = tileColor[index];
                pathType3 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor4 = tileColor[index];
                pathType4 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor5 = tileColor[index];
                pathType5 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor6 = tileColor[index];
                pathType6 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor7 = tileColor[index];
                pathType7 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor8 = tileColor[index];
                pathType8 = tileType[index];
                index = RandomInt(0, tileColor.length);
                pathColor9 = tileColor[index];
                pathType9 = tileType[index];

                for (let tileX = 0; tileX < tileColumns; tileX++) {
                    for (let tileY = 0; tileY < tileRows; tileY++) {
                        mapTile = GetTile(tileX, tileY, pathTile);
                        switch (mapTile) {
                            case "#":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType0);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor0));
                                break
                            case "0":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType0);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor0));
                                break
                            case "1":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType1);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor1));
                                break
                            case "2":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType2);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor2));
                                break
                            case "3":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType3);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor3));
                                break
                            case "4":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType4);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor4));
                                break
                            case "5":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType5);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor5));
                                break
                            case "6":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType6);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor6));
                                break
                            case "7":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType7);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor7));
                                break
                            case "8":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType8);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor8));
                                break
                            case "9":
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, pathType9);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, GetColorVariant(pathColor9));
                                break
                            default:
                                SetMap(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, type_empty);
                                SetMapColor(mazeX * tileColumns + tileX, mazeY * tileRows + tileY, color.empty);
                        }
                    }
                }
            }
        }
    }
}





function GenerateMaze () {
    SetMaze(x, y,);

}



function PlaceEnemies (){
    let x = 0, y = 0;
    for (let i = 0; i < spawn_enemies; i++) {
        x = RandomInt(0, mapColumns);
        y = RandomInt(0, mapRows);
        if (GetMap(x, y) == type_empty) {
            SetEnemy(x, y, kind_lurker)
        }
    }
}


function InitMap() {
    pathTile = pathSet[RandomInt(0, pathSet.length)];
    index = RandomInt(0, tileColor.length);
    pathColor0 = tileColor[index];

    InitMaze();
    BuildMaze(type_grass, color.grass);
    PlaceEnemies();


    // Ground
    for (let x = 0; x < mapColumns; x++) {
        for (let y = 0; y < mapRows; y++) {
            SetGround(x, y, type_empty)
            SetGroundColor(x, y, color.empty)
        }
    }

    // Borders
    for (let x = 0; x < mapColumns; x++) {
        SetMap(x, 0, type_grass);
        SetMapColor(x, 0, GetColorVariant(color.grass))
    }
    for (let y = 0; y < mapRows; y++) {
        SetMap(0, y, type_grass);
        SetMap(mapColumns - 1, y, type_grass);
        SetMapColor(0, y, GetColorVariant(color.grass));
        SetMapColor(mapColumns - 1, y, GetColorVariant(color.grass));
    }
    for (let x = 0; x < mapColumns; x++) {
        SetMap(x, mapRows - 1, type_grass);
        SetMapColor(x, mapRows - 1, GetColorVariant(color.grass));
    }

    FillMap(flowers, graphic_flower, color.flower);
    FillMap(gold, graphic_gold, color.gold);
}


function FillMap(number, graphic, color) {
    for (let i = 0; i < number; i++) {
        SetRandomGround(graphic, GetColorVariant(color))
    }
}
function ClearMap() {
    for (let x = 0; x < mapColumns; x++) {
        for (let y = 0; y < mapRows; y++) {
            SetMap(x, y, type_empty);
            SetMapColor(x, y, color.empty);
            SetGround(x, y, type_empty);
            SetGroundColor(x, y, color.empty)
        }
    }
}




function OnScreen(x, y) {
    return x >= 0 && x < mapColumns && x >= screenPosX && x < screenPosX + screenColumns && y >= 0 && y < mapRows && y >= screenPosY && y < screenPosY + screenRows
}

function OnMap(x, y) {
    return x >= 0 && x < mapColumns && y >= 0 && y < mapRows
}
function OnMaze(x, y) {
    return x >= 0 && x < mazeColumns && y >= 0 && y < mazeRows
}
function OnTile(x, y) {
    return x >= 0 && x < tileColumns && y >= 0 && y < tileRows
}

function OnMini(x, y) {
    return y >= 0 && y < miniMap.length && x >= 0 && x < miniMap[y].length
}


function GetMini(x, y) {
    if (OnMini(x, y)) {
        return miniMap[y].charAt(x)
    } else {
        return type_empty
    }
}


function SetMaze(x, y, type) {
    if (OnMaze(x, y)) {
        maze[y * mazeColumns + x] = type
    } else {
        console.log("Error: tile outside map bounds.")
    }
}
function GetMaze(x, y) {
    if (OnMaze(x, y)) {
        return maze[y * mazeColumns + x]
    } else {
        return type_empty
    }
}

function SetTile(x, y, tile, type) {
    if (OnTile(x, y)) {
        // DOES NOT WORK, HOW TO MANIPULATE STRING CHAR ELEMENTS??
        tile[y].charAt(x)
    } else {
        console.log("Error: tile outside map bounds.")
    }
}

function GetTile(x, y, tile) {
    if (OnTile(x, y)) {
        return tile[y].charAt(x)
    } else {
        return type_empty
    }
}


function SetGround(x, y, graphic) {
    if (OnMap(x, y)) {
        ground[y * mapColumns + x] = graphic
    } else {
        console.log("Error: tile outside map bounds.")
    }
}
function GetGround(x, y) {
    if (OnMap(x, y)) {
        return ground[y * mapColumns + x]
    } else {
        return graphic_empty
    }
}

function SetGroundColor(x, y, color) {
    if (OnMap(x, y)) {
        groundColor[y * mapColumns + x] = color
    } else {
        console.log("Error: tile outside map bounds.")
    }
}
function GetGroundColor(x, y) {
    if (OnMap(x, y)) {
        return groundColor[y * mapColumns + x]
    } else {
        return GetColor(color.empty)
    }
}

function SetMap(x, y, tile) {
    map[y * mapColumns + x] = tile
}
function GetMap(x, y) {
    if (OnMap(x, y)) {
        return map[y * mapColumns + x]
    } else {
        return type_empty
    }
}

function SetMapColor(x, y, color) {
    if (OnMap(x, y)) {
        mapColor[y * mapColumns + x] = color
    } else {
        console.log("Error: tile outside map bounds.")
    }
}
function GetMapColor(x, y) {
    if (OnMap(x, y)) {
        return mapColor[y * mapColumns + x]
    } else {
        return color.empty
    }
}


function SetEntity(x, y, type) {
    if (OnMap(x, y)) {
        entity[y * mapColumns + x] = type
    } else {
        console.log("Error: tile outside map bounds.")
    }

}
function GetEntity(x, y) {
    if (OnMap(x, y)) {
        return entity[y * mapColumns + x]
    } else {
        return type_empty
    }
}

function SetPath(x, y, path) {
    if (OnMap(x, y)) {
        path[y * mapColumns + x] = path
    } else {
        console.log("Error: tile outside map bounds.")
    }
}
function GetPath(x, y) {
    if (OnMap(x, y)) {
        return path[(y * mapColumns + x)]
    } else {
        return path_empty
    }
}

function SetScreen(x, y, gfx, color) {
    screen[y * screenColumns + x] = gfx;
    screenColor[y * screenColumns + x] = color
}
function GetScreen(x, y) {
    return screen[y * screenColumns + x]
}

function SetScreenColor(x, y, color) {
    screenColor[y * screenColumns + x] = color
}

function GetScreenColor(x, y) {
    return screenColor[y * screenColumns + x]
}



function DrawScreen(rows, columns) {
    let x = 0, y = 0, tileX, tileY, tile = ground_empty; u = unit[player1];
    let Paint = GetMapColor;

    for (y = 0; y < rows; y++) {
        for (x = 0; x < columns; x++) {
            tileX = screenPosX + x;
            tileY = screenPosY + y;

            SetScreen(x, y, GetGround(tileX, tileY), GetGroundColor(tileX, tileY));

            tile = GetMap(tileX, tileY);

            switch (tile) {
                case type_empty:
                    break
                case ground_empty:
                    break
                case graphic_none:
                    break
                case graphic_block:
                    SetScreen(x, y, ground_block, color.block);
                    break
                case type_block:
                    SetScreen(x, y, graphic_block, color.block);
                    break
                case type_stone:
                    SetScreen(x, y, graphic_stone, GetMapColor(tileX, tileY));
                    break
                case type_grass:
                    SetScreen(x, y, graphic_grass, GetMapColor(tileX, tileY));
                    break
                case type_flower:
                    SetScreen(x, y, graphic_flower, GetMapColor(tileX, tileY));
                    break
                case type_dirt:
                    SetScreen(x, y, graphic_dirt, GetMapColor(tileX, tileY));
                    break
                case type_water:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                case type_sand:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                case type_marble:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                case type_deco:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                case type_swamp:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                case type_toxic:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                case type_ruin:
                    SetScreen(x, y, graphic_water, GetMapColor(tileX, tileY));
                    break
                
                case type_enemy:
                    SetScreen(x, y, graphic_enemy, GetMapColor(tileX, tileY));
                    break
    
                default:
                    SetScreen(x, y, graphic_empty, color.empty);
            }
        }
    }

    for (let s of u.shot) {
        if (s.d != look_none && OnScreen(s.x, s.y)) {
            SetScreen(s.x - screenPosX, s.y - screenPosY, graphic_bullet, GetColorVariant(color.flower))
        }
    }

    // for (let e of enemy) {
    //     if (e.kind != kind_dead && OnScreen(e.x, e.y)) {
    //         SetScreen(e.x - screenPosX, e.y - screenPosY, graphic_enemy, GetColorVariant(color.enemy))
    //     }
    // }


    if (OnScreen(u.position.x, u.position.y)) {
        SetScreen(u.position.x - screenPosX, u.position.y - screenPosY, u.graphic.current, u.graphic.color);
    }

    output = ""
    for (y = 0; y < rows; y++) {
        for (x = 0; x < columns; x++) {
            output += "<span class='" + GetScreenColor(x, y) + "'>" + GetScreen(x, y) + "</span>"
        }
        output += "<br>"
    };

    field.innerHTML = output
}
